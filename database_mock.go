// Code generated by counterfeiter. DO NOT EDIT.
package main

import (
	"sync"
)

type FakeDatabase struct {
	ReadStub        func(key string) (string, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		key string
	}
	readReturns struct {
		result1 string
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	WriteStub        func(key string, value string) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		key   string
		value string
	}
	writeReturns struct {
		result1 error
	}
	writeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDatabase) Read(key string) (string, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		key string
	}{key})
	fake.recordInvocation("Read", []interface{}{key})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub(key)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readReturns.result1, fake.readReturns.result2
}

func (fake *FakeDatabase) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeDatabase) ReadArgsForCall(i int) string {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return fake.readArgsForCall[i].key
}

func (fake *FakeDatabase) ReadReturns(result1 string, result2 error) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabase) ReadReturnsOnCall(i int, result1 string, result2 error) {
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabase) Write(key string, value string) error {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		key   string
		value string
	}{key, value})
	fake.recordInvocation("Write", []interface{}{key, value})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(key, value)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeReturns.result1
}

func (fake *FakeDatabase) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeDatabase) WriteArgsForCall(i int) (string, string) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].key, fake.writeArgsForCall[i].value
}

func (fake *FakeDatabase) WriteReturns(result1 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) WriteReturnsOnCall(i int, result1 error) {
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDatabase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Database = new(FakeDatabase)

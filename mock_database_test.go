// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/Ragnar-BY/mock_testing/tests (interfaces: Database)

package main

import (
	"reflect"

	pegomock "github.com/petergtz/pegomock"
)

type MockDatabase struct {
	fail func(message string, callerSkip ...int)
}

func NewMockDatabase() *MockDatabase {
	return &MockDatabase{fail: pegomock.GlobalFailHandler}
}

func (mock *MockDatabase) Read(_param0 string) (string, error) {
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Read", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockDatabase) Write(_param0 string, _param1 string) error {
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Write", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockDatabase) VerifyWasCalledOnce() *VerifierDatabase {
	return &VerifierDatabase{mock, pegomock.Times(1), nil}
}

func (mock *MockDatabase) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierDatabase {
	return &VerifierDatabase{mock, invocationCountMatcher, nil}
}

func (mock *MockDatabase) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierDatabase {
	return &VerifierDatabase{mock, invocationCountMatcher, inOrderContext}
}

type VerifierDatabase struct {
	mock                   *MockDatabase
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierDatabase) Read(_param0 string) *Database_Read_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Read", params)
	return &Database_Read_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Database_Read_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *Database_Read_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *Database_Read_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierDatabase) Write(_param0 string, _param1 string) *Database_Write_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Write", params)
	return &Database_Write_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type Database_Write_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *Database_Write_OngoingVerification) GetCapturedArguments() (string, string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *Database_Write_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([]string, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(string)
		}
	}
	return
}
